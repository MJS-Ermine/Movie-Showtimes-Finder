# -*- coding: utf-8 -*-
"""電影查詢器.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10CBm74jyYUvPJk2fu7vstmhZe6Z0SncM
"""

import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from bs4 import BeautifulSoup
import tkinter as tk
from tkinter import ttk
from tkcalendar import DateEntry
from datetime import datetime

# 配置 Chrome 驅動
options = Options()
options.headless = True  # 無頭模式，不顯示瀏覽器窗口

prefs = {
    "profile.default_content_setting_values": {
        'notifications': 2
    }
}
options.add_experimental_option("prefs", prefs)

driver = webdriver.Chrome(options=options)

# 手動添加影院信息
cinemas = {
    "台北信義威秀影城": "TP",
    "MUVIE CINEMAS台北松仁威秀": "MU",
    "MUVIE CINEMAS台北松仁威秀 (MUCROWN)": "MUC",
    "台北京站威秀影城": "QS",
    "板橋大遠百威秀影城": "BQ",
    "中和環球威秀影城": "GM",
    "新店裕隆城威秀影城": "HU",
    "林口MITSUI OUTLET PARK威秀影城": "LK",
    "林口MITSUI OUTLET PARK威秀影城 (Mappa)": "LKMP",
    "桃園統領威秀影城": "TY",
    "新竹大遠百威秀影城": "HS",
    "新竹大遠百威秀影城 (GC)": "HSGC",
    "新竹巨城威秀影城": "BC",
    "頭份尚順威秀影城": "TF",
    "台中大遠百威秀影城": "TZ",
    "台中Tiger City威秀影城": "TT01",
    "台中Tiger City威秀影城 (GC)": "TT02",
    "台中大魯閣新時代威秀影城": "MM",
    "台南大遠百威秀影城": "TN",
    "台南FOCUS威秀影城": "FC",
    "台南南紡威秀影城": "NF",
    "台南南紡威秀影城 (GC)": "NFGC",
    "高雄大遠百威秀影城": "KS",
    "高雄大遠百威秀影城 (GC)": "KSGC",
    "花蓮新天堂樂園威秀影城": "HL"
}

# 緩存
cache = {}

def fetch_showtimes(driver, cinema_id, target_date):
    print(f"Fetching showtimes for cinema ID: {cinema_id}, date: {target_date}")

    # 檢查緩存
    if cinema_id in cache:
        print("Using cached data")
        return cache[cinema_id]

    url = f"https://www.vscinemas.com.tw/ShowTimes/"
    driver.get(url)

    # 選擇影院
    select_element = driver.find_element(By.ID, 'CinemaNameTWInfoF')
    for option in select_element.find_elements(By.TAG_NAME, 'option'):
        if option.get_attribute('value') == cinema_id:
            option.click()
            break

    # 等待數據加載
    try:
        WebDriverWait(driver, 20).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, '.col-xs-12'))
        )
    except Exception as e:
        print(f"TimeoutException: {e}")
        print("Current page source:")
        print(driver.page_source)
        return []

    time.sleep(5)  # 增加額外等待時間，確保AJAX請求完成

    # 獲取頁面內容
    page_source = driver.page_source
    soup = BeautifulSoup(page_source, 'html.parser')

    # 解析數據
    showtimes_data = []
    film_sections = soup.find_all('div', class_='col-xs-12')
    print(f"Number of film sections found: {len(film_sections)}")

    if not film_sections:
        print("No film sections found.")

    for film_section in film_sections:
        film_name_tag = film_section.find('strong', class_='col-xs-12 LangTW MovieName')
        if not film_name_tag:
            print("No film name found in this section")
            continue

        film_name = film_name_tag.text.strip()
        date_tags = film_section.find_all('strong', class_='col-xs-12 LangTW RealShowDate')
        print(f"Number of date tags found in film section: {len(date_tags)}")

        for date_tag in date_tags:
            show_date = date_tag.text.strip().split()[0]  # 只取日期部分，移除星期信息
            print(f"Found show date: {show_date}")  # Debug output
            if show_date != target_date:
                print(f"Skipping show date: {show_date} (target: {target_date})")  # Debug output
                continue
            time_tags = date_tag.find_next_sibling('div', class_='SessionTimeInfo').find_all('div', class_='col-xs-0')
            show_times = [time_tag.text.strip() for time_tag in time_tags]
            print(f"Show times for {show_date}: {show_times}")  # Debug output
            for show_time in show_times:
                showtimes_data.append(f"{film_name} - {show_date} - {show_time}")

    # 緩存結果
    cache[cinema_id] = showtimes_data
    return showtimes_data

def on_submit():
    selected_date = date_entry.get_date()
    target_date_str = selected_date.strftime("%m月%d日")  # 将日期转换为目标格式
    print(f"Searching for date: {target_date_str}")  # Debug output
    cinema_name = cinema_combobox.get()
    cinema_id = cinemas[cinema_name]

    showtimes_data = fetch_showtimes(driver, cinema_id, target_date_str)
    if not showtimes_data:
        showtimes_list.insert(tk.END, "No showtimes data found.")
        return

    showtimes_list.delete(0, tk.END)
    for showtime in showtimes_data:
        showtimes_list.insert(tk.END, showtime)

root = tk.Tk()
root.title("電影場次查找器")

date_label = ttk.Label(root, text="選擇日期:")
date_label.pack(padx=10, pady=5)
date_entry = DateEntry(root, width=20, date_pattern='yyyy-mm-dd')
date_entry.pack(padx=10, pady=5)

cinema_label = ttk.Label(root, text="選擇影院:")
cinema_label.pack(padx=10, pady=5)
cinema_combobox = ttk.Combobox(root, values=list(cinemas.keys()))
cinema_combobox.pack(padx=10, pady=5)

submit_button = ttk.Button(root, text="提交", command=on_submit)
submit_button.pack(padx=10, pady=10)

showtimes_list = tk.Listbox(root, width=50, height=10)
showtimes_list.pack(padx=10, pady=10)

# 在 GUI 關閉時關閉 WebDriver
def on_closing():
    driver.quit()
    root.destroy()

root.protocol("WM_DELETE_WINDOW", on_closing)
root.mainloop()

